const puppeteer = require("puppeteer-core");
const fs = require("fs");
const path = require("path");
const axios = require("axios");
const FormData = require("form-data");

// === CONFIG ===
const VIDEO_URL = "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEimQ_39TeZWHJQv4DmtADkab3looYgqSYev3pD8md1cwLXcbl4wOPq0L8Tr1vbK24uq0LD_9rw9N3GmvVrYoqSXWmARfIaGbasYCYRkPNyKFLKg2RYj4b7djeh9Lgo57HdQv5XgmUlRFNG8RnaH-YBvX2e71OxVuX5FotPa5-RcBodqEYFvU1T_wfcjdXA/s1612/Screenshot_20250725-103106.jpg";
const CHROMIUM_PATH = "/usr/bin/chromium";
const SCREENSHOT_FILE = "video_thumb.png";
const PCLOUD_AUTH = "0Ig470ZsOdg7Z0sX5QYSOs2SnylhpDGsAt5kWoYzX";

// === 1. Take Screenshot from TikTok iframe ===
async function takeScreenshot() {
  const browser = await puppeteer.launch({
    executablePath: CHROMIUM_PATH,
    headless: true,
    args: ["--no-sandbox", "--disable-setuid-sandbox"]
  });

  const page = await browser.newPage();
  await page.goto(VIDEO_URL, { waitUntil: "networkidle2", timeout: 0 });

  // Wait for iframes to load
  await new Promise(resolve => setTimeout(resolve, 3000)); // wait for JS to render content

  const frames = page.frames();
  let videoFrame;

  for (const frame of frames) {
    const hasVideo = await frame.$("video");
    if (hasVideo) {
      videoFrame = frame;
      break;
    }
  }

  if (!videoFrame) {
    console.log("‚ùå No <video> found in any iframe.");
    await browser.close();
    return false;
  }

  const video = await videoFrame.$("video");
  const clip = await video.boundingBox();

  if (!clip) {
    console.log("‚ùå Could not get video bounding box.");
    await browser.close();
    return false;
  }

  await video.screenshot({ path: SCREENSHOT_FILE, clip });
  console.log("‚úÖ Screenshot saved:", SCREENSHOT_FILE);
  await browser.close();
  return true;
}

// === 2. Upload to pCloud ===
async function uploadToPCloud(authToken, filePath) {
  const fileStream = fs.createReadStream(filePath);
  const form = new FormData();
  form.append("filename", path.basename(filePath));
  form.append("file", fileStream);

  const res = await axios.post(
    `https://api.pcloud.com/uploadfile?auth=${authToken}&folderid=0`,
    form,
    { headers: form.getHeaders() }
  );

  if (res.data.result !== 0) {
    throw new Error("‚ùå Upload failed: " + res.data.error);
  }

  console.log("üì§ Uploaded to pCloud:", res.data.metadata[0].name);
}

// === MAIN ===
(async () => {
  try {
    const ok = await takeScreenshot();
    if (!ok) return;

    await uploadToPCloud(PCLOUD_AUTH, SCREENSHOT_FILE);
  } catch (err) {
    console.error("‚ùå Error:", err.message);
  }
})();
